definitions:
  api.UserDetailResp:
    properties:
      created_at:
        example: "2020-12-20 15:15:22"
        type: string
      drone_token:
        example: drone_token
        type: string
      email:
        example: admin_user@sensetime.com
        type: string
      gitlab_token:
        example: gitlabe_token
        type: string
      id:
        description: type UserFullResp struct {
        example: 1
        type: integer
      login_block_until:
        example: "2020-12-20 15:15:22"
        type: string
      name:
        example: admin_user
        type: string
      password:
        example: '********'
        type: string
      role_created_at:
        example: "2020-12-20 15:15:22"
        type: string
      role_description:
        example: description for role
        type: string
      role_id:
        type: integer
      role_name:
        type: string
      role_updated_at:
        example: "2020-12-20 15:15:22"
        type: string
      role_version:
        example: 1
        type: integer
      salt:
        example: salt secret
        type: string
      token:
        example: user token
        type: string
      updated_at:
        example: "2020-12-20 15:15:22"
        type: string
    required:
    - role_description
    - role_version
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        description: can not use LocalTime
        type: string
      drone_token:
        type: string
      email:
        type: string
      gitlab_token:
        type: string
      id:
        type: integer
      login_block_until:
        type: string
      login_retry_count:
        type: integer
      name:
        type: string
      password:
        type: string
      reset_secret:
        type: string
      role_id:
        description: Role            Role       `json:"role" gorm:"ForeignKey:RoleId;AssociationForeignKey:Id"`
          // use RoleId to ForeignKey
        type: integer
      salt:
        type: string
      secret_expired_at:
        type: string
      token:
        type: string
      updated_at:
        type: string
      version:
        description: |-
          DeletedAt LocalTime `json:"deleted_at" gorm:"type:timestamp;default:null"`  // error
          DeletedAt LocalTime `json:"deleted_at" gorm:"type:timestamp null"`  // error
        type: integer
    type: object
  models.UserPagination:
    properties:
      items:
        items:
          $ref: '#/definitions/models.User'
        type: array
      page_num:
        type: integer
      page_size:
        type: integer
      pages:
        type: integer
      total:
        type: integer
    type: object
  utils.HTTPError:
    properties:
      error:
        example: error message here
        type: string
      error_code:
        example: 50000001
        type: integer
    type: object
  v1.ActiveResp:
    properties:
      status_code:
        example: "000000"
        type: string
      status_message:
        example: SUCCESS
        type: string
    type: object
  v1.AppBranchResp:
    properties:
      commit:
        $ref: '#/definitions/v1.Commit'
      name:
        example: G-v2.2.0-RTM
        type: string
    type: object
  v1.AppBriefResp:
    properties:
      created_at:
        example: "2021-01-28 20:20:20"
        type: string
      description:
        example: description the app
        type: string
      drone_repo_id:
        example: 1
        type: integer
      full_name:
        example: senseguard/test_app
        type: string
      gitlab_address:
        example: http://gitlab.sensetime.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: test_app
        type: string
      owner:
        example: "1"
        type: string
      project_id:
        example: 1
        type: integer
      updated_at:
        example: "2021-01-28 20:20:20"
        type: string
      version:
        example: 1
        type: integer
    type: object
  v1.AppConfDetailResp:
    properties:
      app_id:
        example: 1
        type: integer
      config:
        example: app config content
        type: string
      created_at:
        example: "2018-10-09T14:57:23+08:00"
        type: string
      id:
        example: 1
        type: integer
      project_env_id:
        example: 1
        type: integer
      updated_at:
        example: "2018-10-09T14:57:23+08:00"
        type: string
      version:
        example: 1
        type: integer
    required:
    - config
    - created_at
    - id
    - updated_at
    - version
    type: object
  v1.AppTagResp:
    properties:
      commit:
        $ref: '#/definitions/v1.Commit'
      description:
        example: description here
        type: string
      message:
        example: debug set to false
        type: string
      name:
        example: G-v2.2.0-RTM
        type: string
    type: object
  v1.BuildBriefResp:
    properties:
      app_id:
        description: extendBuildField func add this field
        example: 1
        type: integer
      author:
        example: someone
        type: string
      author_email:
        example: someone@sensetime.com
        type: string
      branch:
        example: master
        type: string
      commit:
        example: 26b4808f0d35ac8f4621490166d683e255d9fed4
        type: string
      console_project_id:
        example: 1
        type: integer
      created_at:
        example: 1614655426
        type: integer
      enqueued_at:
        example: 1614655426
        type: integer
      finished_at:
        example: 1614655426
        type: integer
      id:
        example: 1
        type: integer
      message:
        example: |
          fix template issue
        type: string
      number:
        example: 1
        type: integer
      repo_id:
        example: 1
        type: integer
      started_at:
        example: 1614655426
        type: integer
      status:
        example: pending/success/failure
        type: string
    type: object
  v1.BuildDetailResp:
    properties:
      app_id:
        description: extendBuildField func add this field
        example: 1
        type: integer
      author:
        example: someone
        type: string
      author_email:
        example: someone@sensetime.com
        type: string
      branch:
        example: master
        type: string
      commit:
        example: 26b4808f0d35ac8f4621490166d683e255d9fed4
        type: string
      console_project_id:
        example: 1
        type: integer
      created_at:
        example: 1614655426
        type: integer
      enqueued_at:
        example: 1614655426
        type: integer
      finished_at:
        example: 1614655426
        type: integer
      id:
        example: 1
        type: integer
      message:
        example: |
          fix template issue
        type: string
      number:
        example: 1
        type: integer
      procs:
        items:
          $ref: '#/definitions/v1.RootProc'
        type: array
      repo_id:
        example: 1
        type: integer
      started_at:
        example: 1614655426
        type: integer
      status:
        example: pending/success/failure
        type: string
    type: object
  v1.CAStatusResp:
    properties:
      active_limit:
        description: cluster total active limit
        example: 100
        type: integer
      alone_time:
        description: ca alone time, uint seconds, 0 means forever
        example: 0
        type: integer
      auth_id:
        description: cluster license sn
        example: 495788f9-9797-4bf8-a3e1-d65d09b107cd
        type: string
      company:
        description: company name
        example: sensetime_SC
        type: string
      consts:
        additionalProperties: true
        description: cluster consts, value type will be int32 or string
        type: object
      devices:
        description: the quotas that devices have taken
        items:
          $ref: '#/definitions/v1.caDeviceInfo'
        type: array
      disable:
        description: is ca disabled, by soft start/stop ca, if disabled, ca can't
          supply nomal service
        example: false
        type: boolean
      dongle_id:
        description: dongle id
        example: "494330853"
        type: string
      dongle_time:
        description: dongle timestamp
        example: 1616762924
        type: integer
      expired_at:
        description: expire time
        example: "99991231"
        type: string
      feature_ids:
        description: feature ids
        example:
        - 22000
        items:
          type: integer
        type: array
      is_active:
        description: master or standby ca
        example: true
        type: boolean
      mode:
        description: license-ca authorization mode, default is voucher mode
        example: voucher
        type: string
      product:
        description: product name
        example: IVA-VIPER
        type: string
      quotas:
        additionalProperties:
          $ref: '#/definitions/v1.quotaLimit'
        description: cluster quotas, used and total
        type: object
      server:
        description: 0 is master, 1 is slave
        example: 0
        type: integer
      status:
        description: ca status, "alone" or "alive" or "dead", means whether ca is
          in alive
        example: alone
        type: string
    type: object
  v1.ChartDetail:
    properties:
      name:
        example: mysql
        type: string
      version:
        items:
          $ref: '#/definitions/v1.ChartVersion'
        type: array
    required:
    - name
    - version
    type: object
  v1.ChartVersion:
    properties:
      apiVersion:
        example: v1
        type: string
      appVersion:
        example: 5.7.28
        type: string
      created:
        example: "2020-10-23T08:27:01.937112605Z"
        type: string
      description:
        example: Fast, reliable, scalable, and easy to use open-source relational
          database system.
        type: string
      digest:
        example: 76a25ee9205f22c1c922a54a88a161472c1966a54e9d483f16e960449a134ef3
        type: string
      keywords:
        example:
        - mysql
        - database
        - sql
        items:
          type: string
        type: array
      maintainers:
        items:
          $ref: '#/definitions/v1.Maintainer'
        type: array
      name:
        example: mysql
        type: string
      urls:
        example:
        - charts/mysql-5.7.28-master-54b0c26.tgz
        items:
          type: string
        type: array
      version:
        example: 5.7.28-master-54b0c26
        type: string
    required:
    - created
    - digest
    - name
    - urls
    - version
    type: object
  v1.ClusterBriefResp:
    properties:
      created_at:
        example: "2021-01-28 20:20:20"
        type: string
      description:
        example: description for a k8s cluster
        type: string
      id:
        example: 1
        type: integer
      name:
        example: test-cluster
        type: string
      updated_at:
        example: "2021-01-28 20:20:20"
        type: string
    type: object
  v1.ClusterNodeResp:
    properties:
      annotations:
        items:
          $ref: '#/definitions/v1.NodeAnnotation'
        type: array
      architecture:
        example: amd64
        type: string
      container_run_time_version:
        example: docker://19.3.4
        type: string
      created_at:
        example: "2021-02-13T18:12:05+08:00"
        type: string
      hostname:
        example: kubernetes-master1
        type: string
      internal_ip:
        example: 10.10.10.10
        type: string
      kernel_version:
        example: 4.18.0-193.6.3.el8_2.x86_64
        type: string
      labels:
        items:
          $ref: '#/definitions/v1.NodeLabel'
        type: array
      name:
        example: kubernetes-master1
        type: string
      os:
        example: linux
        type: string
      os_image:
        example: CentOS Linux 8 (Core)
        type: string
      pod_cidr:
        example: 10.244.0.0/24
        type: string
      uid:
        example: 3550d3f1-51b4-41e7-ba65-83d029f31e2b
        type: string
      unschedulable:
        example: false
        type: boolean
    type: object
  v1.Commit:
    properties:
      author_email:
        example: someone@sensetime.com
        type: string
      author_name:
        example: someone
        type: string
      authored_date:
        example: "2021-02-24T15:45:23.000+08:00"
        type: string
      committer_date:
        example: "2021-02-24T15:45:23.000+08:00"
        type: string
      committer_email:
        example: someone@sensetime.com
        type: string
      committer_name:
        example: someone
        type: string
      id:
        example: 9a44bd6973d12f2d280e9548c1ee430bf119d168
        type: string
      message:
        example: debug set to false
        type: string
    type: object
  v1.ContainerResp:
    properties:
      image:
        example: 10.151.3.75/sensenebula-guard-std/senseguard-oauth2:1.0.0-dev-fe380d
        type: string
      name:
        example: senseguard-oauth2
        type: string
    required:
    - image
    - name
    type: object
  v1.CreateAppReq:
    properties:
      description:
        description: 描述这个app
        example: description the app
        type: string
      gitlab_project_id:
        description: 当前用户在gitlab上拥有的project名称(即app的名称)
        example: 1
        type: integer
      name:
        description: 新建的app的名称
        example: test_app
        type: string
      project_id:
        description: 属于哪个project(id关联)
        example: 1
        type: integer
    required:
    - name
    - project_id
    type: object
  v1.CreateBuildReq:
    properties:
      envs:
        items:
          $ref: '#/definitions/v1.Env'
        type: array
      name:
        example: master/v1.0.0
        type: string
      type:
        example: branch/tag
        type: string
    required:
    - name
    - type
    type: object
  v1.CreateClusterReq:
    properties:
      config:
        example: k8s config file
        type: string
      description:
        example: description for a k8s cluster
        type: string
      name:
        example: test-cluster
        type: string
    required:
    - config
    - name
    type: object
  v1.CreateDeploymentReq:
    properties:
      app_id:
        example: 1
        type: integer
      chart_name:
        example: senseguard-oauth2-default
        type: string
      chart_version:
        example: 1.0.0-dev-fe380d
        type: string
      description:
        example: description for deployment
        type: string
      project_env_id:
        description: project id & namespace id
        example: 1
        type: integer
    required:
    - app_id
    - chart_name
    - chart_version
    - project_env_id
    type: object
  v1.CreateEnvReq:
    properties:
      cluster_id:
        type: integer
      description:
        example: description for env
        type: string
      namespace:
        example: namespace of k8s cluster
        type: string
    required:
    - cluster_id
    - namespace
    type: object
  v1.CreateProjectEnvReq:
    properties:
      description:
        example: description the cluster project env
        type: string
      env_id:
        description: env表中对应(基于cluster_id进行查询的)namespace对应的id字段值。如cluster_id为164的default名称空间对应的id为448
        example: 1
        type: integer
      name:
        description: 要创建的项目环境的名字(project_env表的name)
        example: cluster name
        type: string
    required:
    - env_id
    - name
    type: object
  v1.CreateProjectReq:
    properties:
      description:
        example: description the project
        type: string
      name:
        example: test-project
        type: string
    required:
    - name
    type: object
  v1.CreateRegistryReq:
    properties:
      address:
        example: 10.151.3.75
        type: string
      password:
        example: '*********'
        type: string
      username:
        example: admin
        type: string
    required:
    - address
    - password
    - username
    type: object
  v1.CreateRoleReq:
    properties:
      description:
        example: description for role
        type: string
      name:
        example: admin_role
        type: string
    required:
    - name
    type: object
  v1.CreateSecretReq:
    properties:
      name:
        example: docker_user
        type: string
      value:
        example: admin
        type: string
    required:
    - name
    - value
    type: object
  v1.CreateUserReq:
    properties:
      email:
        example: admin_user@sensetime.com
        type: string
      name:
        example: admin_user
        type: string
      password:
        example: '********'
        type: string
      role_id:
        description: RoleId   *RoleIdReq `json:"role_id" binding:"required"`  // xorm可以用这种方式定义，但gorm则会ctx.ShouldBind报错
        example: 1
        type: integer
    required:
    - email
    - name
    - password
    - role_id
    type: object
  v1.DeploymentDetailResp:
    properties:
      app_id:
        example: 1
        type: integer
      chart_name:
        example: senseguard-oauth2
        type: string
      chart_version:
        example: 1.0.0-dev-000c37
        type: string
      created_at:
        example: "2021-03-09 15:18:13"
        type: string
      description:
        example: description for deployment
        type: string
      env_id:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      name:
        example: senseguard-oauth2-default
        type: string
      updated_at:
        example: "2021-03-09 15:18:13"
        type: string
      version:
        example: 1
        type: integer
    type: object
  v1.DroneRepoBriefResp:
    properties:
      clone_url:
        example: http://gitlab.sz.sensetime.com/fis-infra/infra-console.git
        type: string
      full_name:
        example: fis-infra/infra-console
        type: string
      is_added:
        example: false
        type: boolean
      name:
        example: infra-console
        type: string
      owner:
        example: admin
        type: string
      project_id:
        example: 1
        type: integer
    type: object
  v1.Env:
    properties:
      key:
        example: key
        type: string
      value:
        example: value
        type: string
    required:
    - key
    - value
    type: object
  v1.EnvBriefResp:
    properties:
      cluster_id:
        example: 1
        type: integer
      created_at:
        example: "2021-01-28 20:20:20"
        type: string
      description:
        example: description for env
        type: string
      id:
        example: 1
        type: integer
      namespace:
        example: namespace of k8s cluster
        type: string
      updated_at:
        example: "2021-01-28 20:20:20"
        type: string
      version:
        example: 1
        type: integer
    type: object
  v1.GlobalNodeResp:
    properties:
      annotations:
        items:
          $ref: '#/definitions/v1.NodeAnnotation'
        type: array
      architecture:
        example: amd64
        type: string
      cluster_id:
        example: 1
        type: integer
      cluster_name:
        example: devops
        type: string
      container_run_time_version:
        example: docker://19.3.4
        type: string
      created_at:
        example: "2021-02-13T18:12:05+08:00"
        type: string
      hostname:
        example: kubernetes-master1
        type: string
      internal_ip:
        example: 10.10.10.10
        type: string
      kernel_version:
        example: 4.18.0-193.6.3.el8_2.x86_64
        type: string
      labels:
        items:
          $ref: '#/definitions/v1.NodeLabel'
        type: array
      name:
        example: kubernetes-master1
        type: string
      os:
        example: linux
        type: string
      os_image:
        example: CentOS Linux 8 (Core)
        type: string
      pod_cidr:
        example: 10.244.0.0/24
        type: string
      uid:
        example: 3550d3f1-51b4-41e7-ba65-83d029f31e2b
        type: string
      unschedulable:
        example: false
        type: boolean
    required:
    - cluster_id
    - cluster_name
    type: object
  v1.InstanceBriefResp:
    properties:
      chart_name:
        description: 'helm deploy in cluster name, example: senseguard-oauth2'
        example: senseguard-oauth2
        type: string
      chart_version:
        example: 1.0.0-dev-fe380d
        type: string
      cluster_name:
        example: test-cluster
        type: string
      created_at:
        example: "2021-03-11 16:47:37"
        type: string
      env_namespace:
        example: default
        type: string
      id:
        example: 1
        type: integer
      name:
        example: senseguard-oauth2-default
        type: string
      project_name:
        example: test-project
        type: string
      updated_at:
        example: "2021-03-11 16:47:37"
        type: string
      version:
        example: 1
        type: integer
    type: object
  v1.InstanceConfResp:
    properties:
      content:
        example: |-
          server:
            port: 8080
            servlet:
              context-path: /sys
          spring:
            application:
              name: aurora-system-service
            ...
        type: string
      name:
        example: bootstrap.yaml
        type: string
    type: object
  v1.InstanceDetailResp:
    properties:
      app_id:
        example: 1
        type: integer
      chart_name:
        description: 'helm deploy in cluster name, example: senseguard-oauth2'
        example: senseguard-oauth2
        type: string
      chart_version:
        example: 1.0.0-dev-fe380d
        type: string
      cluster_name:
        example: test-cluster
        type: string
      created_at:
        example: "2021-03-11 16:47:37"
        type: string
      env_id:
        example: 1
        type: integer
      env_namespace:
        example: default
        type: string
      id:
        example: 1
        type: integer
      last_deployment:
        description: deployment_id
        example: 1
        type: integer
      name:
        example: senseguard-oauth2-default
        type: string
      project_name:
        example: test-project
        type: string
      updated_at:
        example: "2021-03-11 16:47:37"
        type: string
      version:
        example: 1
        type: integer
    type: object
  v1.InstanceLogResp:
    properties:
      container_name:
        example: senseguard-oauth2
        type: string
      content:
        example: log content here
        type: string
      pod_name:
        example: senseguard-oauth2-7b78686878-vcx79
        type: string
    required:
    - content
    type: object
  v1.InstancePod:
    properties:
      containers:
        items:
          $ref: '#/definitions/v1.ContainerResp'
        type: array
      dns_policy:
        example: ClusterFirst
        type: string
      host_network:
        example: false
        type: boolean
      name:
        example: senseguard-oauth2-7b78686878-vcx79
        type: string
      node_name:
        example: k8s-master1
        type: string
      pod_ip:
        example: 10.244.0.70
        type: string
      restart_policy:
        example: Always
        type: string
      start_time:
        example: "2021-03-11T14:49:55+08:00"
        type: string
      status:
        example: Running
        type: string
    required:
    - containers
    - dns_policy
    - host_network
    - name
    - node_name
    - pod_ip
    - restart_policy
    - start_time
    - status
    type: object
  v1.InstancePodResp:
    properties:
      namespace:
        example: default
        type: string
      pods:
        items:
          $ref: '#/definitions/v1.InstancePod'
        type: array
    required:
    - namespace
    - pods
    type: object
  v1.InstanceScaleResp:
    properties:
      number:
        description: replicas number
        example: 1
        type: integer
    type: object
  v1.LoginUserInfo:
    properties:
      name:
        example: admin_user
        type: string
      password:
        example: '********'
        type: string
    required:
    - name
    - password
    type: object
  v1.Maintainer:
    properties:
      email:
        example: someone@email.com
        type: string
      name:
        example: someone
        type: string
    type: object
  v1.NodeAnnotation:
    properties:
      key:
        example: flannel.alpha.coreos.com/backend-type
        type: string
      value:
        example: host-gw
        type: string
    type: object
  v1.NodeLabel:
    properties:
      key:
        example: beta.kubernetes.io/os
        type: string
      value:
        example: linux
        type: string
    type: object
  v1.PaginateAppResp:
    properties:
      items:
        items:
          $ref: '#/definitions/v1.AppBriefResp'
        type: array
      page_num:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      pages:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    required:
    - items
    - page_num
    - page_size
    - pages
    - total
    type: object
  v1.PaginateBriefUserResp:
    properties:
      items:
        items:
          $ref: '#/definitions/v1.UserBriefResp'
        type: array
      page_num:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      pages:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    required:
    - items
    - page_num
    - page_size
    - pages
    - total
    type: object
  v1.PaginateRoleResp:
    properties:
      items:
        items:
          $ref: '#/definitions/v1.RoleBriefResp'
        type: array
      page_num:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      pages:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    required:
    - items
    - page_num
    - page_size
    - pages
    - total
    type: object
  v1.PaginationClusterResp:
    properties:
      items:
        items:
          $ref: '#/definitions/v1.ClusterBriefResp'
        type: array
      page_num:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      pages:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    required:
    - items
    - page_num
    - page_size
    - pages
    - total
    type: object
  v1.PaginationDeploymentResp:
    properties:
      items:
        items:
          $ref: '#/definitions/v1.DeploymentDetailResp'
        type: array
      page_num:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      pages:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    required:
    - items
    - page_num
    - page_size
    - pages
    - total
    type: object
  v1.PaginationEnvResp:
    properties:
      items:
        items:
          $ref: '#/definitions/v1.EnvBriefResp'
        type: array
      page_num:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      pages:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    required:
    - items
    - page_num
    - page_size
    - pages
    - total
    type: object
  v1.PaginationInstanceResp:
    properties:
      items:
        items:
          $ref: '#/definitions/v1.InstanceBriefResp'
        type: array
      page_num:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      pages:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    required:
    - items
    - page_num
    - page_size
    - pages
    - total
    type: object
  v1.PaginationProjectResp:
    properties:
      items:
        items:
          $ref: '#/definitions/v1.ProjectBriefResp'
        type: array
      page_num:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      pages:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    required:
    - items
    - page_num
    - page_size
    - pages
    - total
    type: object
  v1.ProcCommon:
    properties:
      end_time:
        example: 1542277389
        type: integer
      exit_code:
        example: 0
        type: integer
      id:
        example: 1
        type: integer
      machine:
        example: 2b545f3330cf
        type: string
      name:
        example: clone
        type: string
      pgid:
        example: 1
        type: integer
      pid:
        example: 1
        type: integer
      ppid:
        example: 1
        type: integer
      start_time:
        example: 1542277389
        type: integer
      state:
        example: success/failure
        type: string
    required:
    - end_time
    - exit_code
    - id
    - machine
    - name
    - pgid
    - pid
    - ppid
    - start_time
    - state
    type: object
  v1.ProjectBriefResp:
    properties:
      created_at:
        example: "2021-01-28 20:20:20"
        type: string
      description:
        example: description the project
        type: string
      id:
        example: 1
        type: integer
      name:
        example: test-project
        type: string
      updated_at:
        example: "2021-01-28 20:20:20"
        type: string
    type: object
  v1.ProjectEnvBriefResp:
    properties:
      created_at:
        example: "2021-01-28 20:20:20"
        type: string
      description:
        example: description the project
        type: string
      env_id:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      name:
        example: test-project
        type: string
      project_id:
        example: 1
        type: integer
      updated_at:
        example: "2021-01-28 20:20:20"
        type: string
    type: object
  v1.RegistryBriefResp:
    properties:
      address:
        example: 10.151.3.75
        type: string
      username:
        example: admin
        type: string
    required:
    - address
    - username
    type: object
  v1.ResetPwdReq:
    properties:
      email:
        example: admin_user@sensetime.com
        type: string
      password:
        example: '********'
        type: string
      re_password:
        example: '********'
        type: string
      secret:
        example: TR6UdhT7ebJOCC5N
        type: string
    required:
    - email
    - password
    - re_password
    - secret
    type: object
  v1.ResetUserReq:
    properties:
      email:
        example: admin_user@sensetime.com
        type: string
    required:
    - email
    type: object
  v1.RoleBriefResp:
    properties:
      created_at:
        example: "2018-10-09T14:57:23+08:00"
        type: string
      description:
        example: description for role
        type: string
      id:
        example: 1
        type: integer
      name:
        example: admin_role
        type: string
      updated_at:
        example: "2018-10-09T14:57:23+08:00"
        type: string
      version:
        example: 1
        type: integer
    required:
    - created_at
    - description
    - id
    - name
    - updated_at
    - version
    type: object
  v1.RootProc:
    properties:
      children:
        items:
          $ref: '#/definitions/v1.ProcCommon'
        type: array
      end_time:
        example: 1542277389
        type: integer
      exit_code:
        example: 0
        type: integer
      id:
        example: 1
        type: integer
      machine:
        example: 2b545f3330cf
        type: string
      name:
        example: clone
        type: string
      pgid:
        example: 1
        type: integer
      pid:
        example: 1
        type: integer
      ppid:
        example: 1
        type: integer
      start_time:
        example: 1542277389
        type: integer
      state:
        example: success/failure
        type: string
    required:
    - children
    - end_time
    - exit_code
    - id
    - machine
    - name
    - pgid
    - pid
    - ppid
    - start_time
    - state
    type: object
  v1.SecretBriefResp:
    properties:
      name:
        example: docker_user
        type: string
    type: object
  v1.UpdateAppConfReq:
    properties:
      config:
        example: the app helm chart values.yaml config content
        type: string
      project_env_id:
        example: 1
        type: integer
    required:
    - config
    - project_env_id
    type: object
  v1.UpdateAppGitlabAddressReq:
    properties:
      gitlab_project_id:
        example: 1
        type: integer
    required:
    - gitlab_project_id
    type: object
  v1.UpdateAppReq:
    properties:
      description:
        example: description for app
        type: string
    type: object
  v1.UpdateClusterReq:
    properties:
      config:
        example: k8s config file
        type: string
      description:
        example: description the cluster
        type: string
    required:
    - config
    type: object
  v1.UpdateDeploymentReq:
    properties:
      app_id:
        type: integer
      chart_name:
        example: senseguard-oauth2
        type: string
      chart_version:
        example: 1.0.0-dev-000c37
        type: string
      description:
        example: description for deployment
        type: string
      project_env_id:
        type: integer
    required:
    - app_id
    - chart_name
    - chart_version
    - project_env_id
    type: object
  v1.UpdateEnvReq:
    properties:
      description:
        example: description for env
        type: string
    type: object
  v1.UpdateProjectEnvReq:
    properties:
      description:
        example: description the project env
        type: string
    type: object
  v1.UpdateProjectReq:
    properties:
      description:
        example: description the project
        type: string
    type: object
  v1.UpdateRegistryReq:
    properties:
      password:
        example: admin
        type: string
      username:
        example: admin
        type: string
    required:
    - password
    - username
    type: object
  v1.UpdateRoleReq:
    properties:
      description:
        example: description for role
        type: string
    type: object
  v1.UpdateSecretReq:
    properties:
      value:
        example: admin
        type: string
    required:
    - value
    type: object
  v1.UpdateUserAccessTokenReq:
    properties:
      gitlab_token:
        description: gitlab access token
        example: real gitlab access token
        type: string
    required:
    - gitlab_token
    type: object
  v1.UpdateUserPwdReq:
    properties:
      new_password:
        example: '********'
        type: string
      old_password:
        example: '********'
        type: string
    required:
    - new_password
    - old_password
    type: object
  v1.UpdateUserRoleReq:
    properties:
      role_id:
        example: 1
        type: integer
    required:
    - role_id
    type: object
  v1.UserBriefResp:
    properties:
      created_at:
        example: "2018-10-09T14:57:23+08:00"
        type: string
      email:
        example: admin@sensetime.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: admin_role
        type: string
      role_id:
        example: 1
        type: integer
      updated_at:
        example: "2018-10-09T14:57:23+08:00"
        type: string
      version:
        example: 1
        type: integer
    required:
    - created_at
    - email
    - id
    - name
    - role_id
    - updated_at
    - version
    type: object
  v1.caDeviceInfo:
    properties:
      quota_usage:
        additionalProperties:
          type: integer
        type: object
      udid:
        example: engine-face-extract-service-kd4k9-a954a1f74cd23d97248249d04de10221-fba9aae9f524e083
        type: string
    type: object
  v1.quotaLimit:
    properties:
      total:
        description: total quotas
        example: 2
        type: integer
      used:
        description: used quotas
        example: 1
        type: integer
    type: object
info:
  contact: {}
paths:
  /v1/apps:
    get:
      consumes:
      - application/json
      description: Api to get all apps
      parameters:
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: App number size
        in: query
        name: page_size
        required: true
        type: integer
      - description: 'Fuzzy Query(field: name)'
        in: query
        name: query_field
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.PaginateAppResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all apps
      tags:
      - APP
    post:
      consumes:
      - application/json
      description: Api to create app
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateAppReq'
      produces:
      - application/json
      responses:
        "201":
          description: StatusCreated
          schema:
            $ref: '#/definitions/v1.AppBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create app
      tags:
      - APP
  /v1/apps/{id}:
    delete:
      consumes:
      - application/json
      description: api for get an app by id
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get an app by id
      tags:
      - APP
    get:
      consumes:
      - application/json
      description: api for get an app by id
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.AppBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get an app by id
      tags:
      - APP
    put:
      consumes:
      - application/json
      description: api for update app description
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      - description: JSON type for update app description
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateAppReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.RoleBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update app description by id and body
      tags:
      - APP
  /v1/apps/{id}/branches:
    get:
      consumes:
      - application/json
      description: Api for get app branches info with app id
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.AppBranchResp'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get app branches info with app id
      tags:
      - APP
  /v1/apps/{id}/builds:
    get:
      consumes:
      - application/json
      description: Api to get all builds
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Request page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: 'App number per page '
        in: query
        name: per_page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            items:
              $ref: '#/definitions/v1.BuildBriefResp'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get specific app's all builds info
      tags:
      - APP
    post:
      consumes:
      - application/json
      description: Api to trigger specific app's branch or tag build process
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateBuildReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.BuildBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Trigger specific app's branch or tag build process
      tags:
      - APP
  /v1/apps/{id}/builds/{build_number}:
    get:
      consumes:
      - application/json
      description: Api for get build by id
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      - description: Build number
        in: path
        name: build_number
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.BuildDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get build by id
      tags:
      - APP
  /v1/apps/{id}/builds/{build_number}/logs/{log_number}:
    get:
      consumes:
      - application/json
      description: Api for get specific app build log by log number
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      - description: Build number
        in: path
        name: build_number
        required: true
        type: integer
      - description: Log number
        in: path
        name: log_number
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.BuildDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get specific app build log by log number
      tags:
      - APP
  /v1/apps/{id}/charts:
    get:
      consumes:
      - application/json
      description: Api to get an app's all charts version list
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            items:
              $ref: '#/definitions/v1.ChartVersion'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get specific app's all charts version list
      tags:
      - APP
  /v1/apps/{id}/config:
    delete:
      consumes:
      - application/json
      description: api for delete specific app config by app_id and project_env_id
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      - description: Project env ID
        in: query
        name: pe_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: delete specific app config
      tags:
      - APP
    get:
      consumes:
      - application/json
      description: api for get specific app config by app_id and project_env_id
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      - description: Project env ID
        in: query
        name: pe_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.AppConfDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: get specific app config
      tags:
      - APP
    put:
      consumes:
      - application/json
      description: api for update or create specific app conf by app_id and project_env_id
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      - description: JSON type for update or create app info
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateAppConfReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.AppConfDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update or create specific app conf
      tags:
      - APP
  /v1/apps/{id}/gitlab:
    put:
      consumes:
      - application/json
      description: api for update app gitlab address
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      - description: JSON type for update app gitlab address
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateAppGitlabAddressReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.AppBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update app gitlab address
      tags:
      - APP
  /v1/apps/{id}/instances:
    get:
      consumes:
      - application/json
      description: Api for get app app instance's list by app id
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: 'Instance number page size '
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.PaginationInstanceResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get app instance's list by app id
      tags:
      - APP
  /v1/apps/{id}/tags:
    get:
      consumes:
      - application/json
      description: Api for get app tags info with app id
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            items:
              $ref: '#/definitions/v1.AppTagResp'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get app tags info with app id
      tags:
      - APP
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Api to login rock platform with name and password
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.LoginUserInfo'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.UserDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Login rock platform with name and password
      tags:
      - AUTH
  /v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Api to logout rock platform
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Logout rock platform
      tags:
      - AUTH
  /v1/auth/pwd:
    put:
      consumes:
      - application/json
      description: Api to update user password with secret
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.ResetPwdReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update user's password with secret
      tags:
      - AUTH
  /v1/auth/reset:
    post:
      consumes:
      - application/json
      description: Api to create reset email
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.ResetUserReq'
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create reset email
      tags:
      - AUTH
  /v1/builds:
    get:
      consumes:
      - application/json
      description: Api to get global builds info
      parameters:
      - default: 1
        description: Request page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: 'App number per page '
        in: query
        name: per_page
        required: true
        type: integer
      - description: Console project id
        in: query
        name: console_project_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            items:
              $ref: '#/definitions/v1.BuildBriefResp'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get global builds info
      tags:
      - BUILD
  /v1/charts:
    get:
      consumes:
      - application/json
      description: Api for get all chart list
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            items:
              $ref: '#/definitions/v1.ChartDetail'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all chart list
      tags:
      - CHART
  /v1/charts/{name}:
    get:
      consumes:
      - application/json
      description: Api for get named chart version list
      parameters:
      - description: Chart name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            items:
              $ref: '#/definitions/v1.ChartVersion'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get named chart version list
      tags:
      - CHART
  /v1/charts/{name}/versions/{version}:
    delete:
      consumes:
      - application/json
      description: Api for delete named chart specific version
      parameters:
      - description: Chart name
        in: path
        name: name
        required: true
        type: string
      - description: Chart version
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete named chart specific version
      tags:
      - CHART
    get:
      consumes:
      - application/json
      description: Api for get named chart specific version info
      parameters:
      - description: Chart name
        in: path
        name: name
        required: true
        type: string
      - description: Chart version
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ChartVersion'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get named chart specific version info
      tags:
      - CHART
  /v1/clusters:
    get:
      consumes:
      - application/json
      description: Api to get all k8s clusters
      parameters:
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: Cluster number size
        in: query
        name: page_size
        required: true
        type: integer
      - description: 'Fuzzy Query(field: name)'
        in: query
        name: query_field
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.PaginationClusterResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all clusters
      tags:
      - CLUSTER
    post:
      consumes:
      - application/json
      description: Api to create k8s cluster
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateClusterReq'
      produces:
      - application/json
      responses:
        "201":
          description: StatusCreated
          schema:
            $ref: '#/definitions/v1.ClusterBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create cluster
      tags:
      - CLUSTER
  /v1/clusters/{id}:
    delete:
      consumes:
      - application/json
      description: Api to delete a cluster by id
      parameters:
      - description: Cluster ID
        in: body
        name: id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete a cluster by id
      tags:
      - CLUSTER
    get:
      consumes:
      - application/json
      description: Api to get a cluster by id
      parameters:
      - description: Cluster ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ClusterBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get a cluster by id
      tags:
      - CLUSTER
    put:
      consumes:
      - application/json
      description: api for update cluster description
      parameters:
      - description: Cluster ID
        in: path
        name: id
        required: true
        type: integer
      - description: JSON type for update cluster description
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ClusterBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update cluster description by id and body
      tags:
      - CLUSTER
  /v1/clusters/{id}/envs:
    get:
      consumes:
      - application/json
      description: api for get cluster envs by id
      parameters:
      - description: Cluster ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: Env number size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.PaginationEnvResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get cluster envs by id
      tags:
      - CLUSTER
  /v1/clusters/{id}/license-c2v:
    get:
      consumes:
      - application/json
      description: api for download license hardware c2v file
      parameters:
      - description: Cluster ID
        in: path
        name: id
        required: true
        type: integer
      - description: license master or slave type
        in: query
        name: server_type
        required: true
        type: integer
      - description: license mode
        in: query
        name: license_mode
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Download license hardware c2v file
      tags:
      - CLUSTER
  /v1/clusters/{id}/license-fingerprint:
    get:
      consumes:
      - application/json
      description: api for download license hardware fingerprint file
      parameters:
      - description: Cluster ID
        in: path
        name: id
        required: true
        type: integer
      - description: license master or slave type
        in: query
        name: server_type
        required: true
        type: integer
      - description: license mode
        in: query
        name: license_mode
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Download license hardware fingerprint file
      tags:
      - CLUSTER
  /v1/clusters/{id}/license-offline:
    post:
      consumes:
      - application/json
      description: api for offline active the license-ca
      parameters:
      - description: Cluster ID
        in: path
        name: id
        required: true
        type: integer
      - description: license master or slave type
        in: query
        name: server_type
        required: true
        type: integer
      - description: license mode
        in: query
        name: license_mode
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ActiveResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Offline active the license-ca
      tags:
      - CLUSTER
  /v1/clusters/{id}/license-online:
    post:
      consumes:
      - application/json
      description: api for online active the license-ca
      parameters:
      - description: Cluster ID
        in: path
        name: id
        required: true
        type: integer
      - description: license master or slave type
        in: query
        name: server_type
        required: true
        type: integer
      - description: license mode
        in: query
        name: license_mode
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ActiveResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Online active the license-ca
      tags:
      - CLUSTER
  /v1/clusters/{id}/license-status:
    get:
      consumes:
      - application/json
      description: api for get license status by cluster id and license mode
      parameters:
      - description: Cluster ID
        in: path
        name: id
        required: true
        type: integer
      - description: license mode
        in: query
        name: license_mode
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            items:
              $ref: '#/definitions/v1.CAStatusResp'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get license status by cluster id and license mode
      tags:
      - CLUSTER
  /v1/clusters/{id}/nodes:
    get:
      consumes:
      - application/json
      description: api for get specific cluster's all nodes
      parameters:
      - description: Cluster ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            items:
              $ref: '#/definitions/v1.ClusterNodeResp'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get specific cluster's all nodes
      tags:
      - CLUSTER
  /v1/clusters/{id}/nodes/{name}:
    get:
      consumes:
      - application/json
      description: api for get a specific cluster node
      parameters:
      - description: Cluster ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ClusterNodeResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get a specific cluster node
      tags:
      - CLUSTER
  /v1/deployment:
    get:
      consumes:
      - application/json
      description: Api for get all deployments
      parameters:
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: 'Deployment number page size '
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.PaginationDeploymentResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all deployments
      tags:
      - DEPLOYMENT
  /v1/deployment/{id}:
    delete:
      consumes:
      - application/json
      description: Api for delete deployment by id
      parameters:
      - description: Deployment Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete deployment by id
      tags:
      - DEPLOYMENT
    get:
      consumes:
      - application/json
      description: Api for get deployment by id
      parameters:
      - description: Deployment Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.DeploymentDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get deployment by id
      tags:
      - DEPLOYMENT
    put:
      consumes:
      - application/json
      description: Api for update deployment info
      parameters:
      - description: Deployment Id
        in: path
        name: id
        required: true
        type: integer
      - description: JSON type for update deployment info
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateDeploymentReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusNoContent
          schema:
            $ref: '#/definitions/v1.DeploymentDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update deployment info and body
      tags:
      - DEPLOYMENT
  /v1/deployments:
    post:
      consumes:
      - application/json
      description: Api to create deployment
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateDeploymentReq'
      produces:
      - application/json
      responses:
        "201":
          description: StatusCreated
          schema:
            $ref: '#/definitions/v1.DeploymentDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create deployment
      tags:
      - DEPLOYMENT
  /v1/envs:
    get:
      consumes:
      - application/json
      description: Api to get all env
      parameters:
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: Env number size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.PaginationEnvResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all envs
      tags:
      - ENV
    post:
      consumes:
      - application/json
      description: Api to create env
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateEnvReq'
      produces:
      - application/json
      responses:
        "201":
          description: StatusCreated
          schema:
            $ref: '#/definitions/v1.EnvBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create env
      tags:
      - ENV
  /v1/envs/{id}:
    delete:
      consumes:
      - application/json
      description: api for get an env by id
      parameters:
      - description: Env ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get an env by id
      tags:
      - ENV
    get:
      consumes:
      - application/json
      description: api for get an env by id
      parameters:
      - description: Env ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.EnvBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get an env by id
      tags:
      - ENV
    put:
      consumes:
      - application/json
      description: api for update env description
      parameters:
      - description: Env ID
        in: path
        name: id
        required: true
        type: integer
      - description: JSON type for update env description
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateEnvReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.EnvBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update env description by id and body
      tags:
      - ENV
  /v1/instances:
    get:
      consumes:
      - application/json
      description: Api for get all instances
      parameters:
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: 'Instance number page size '
        in: query
        name: page_size
        required: true
        type: integer
      - description: 'Fuzzy Query(field: name)'
        in: query
        name: query_field
        type: string
      - description: 'Cluster name '
        in: query
        name: cluster
        type: string
      - description: 'Project name '
        in: query
        name: project
        type: string
      - description: App Id
        in: query
        name: app_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.PaginationInstanceResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all instances
      tags:
      - INSTANCE
  /v1/instances/{id}:
    delete:
      consumes:
      - application/json
      description: Api to delete instance by instance id
      parameters:
      - description: Instance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.InstanceScaleResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete instance by instance id
      tags:
      - INSTANCE
    get:
      consumes:
      - application/json
      description: Api for get instances by id
      parameters:
      - description: Instance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.InstanceDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get instances by id
      tags:
      - INSTANCE
  /v1/instances/{id}/configs:
    get:
      consumes:
      - application/json
      description: Api for get instance's config by instance id
      parameters:
      - description: Instance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            items:
              $ref: '#/definitions/v1.InstanceConfResp'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get instance's config by instance id
      tags:
      - INSTANCE
  /v1/instances/{id}/deployments:
    get:
      consumes:
      - application/json
      description: Api to get instance's relevant deployments by instance id
      parameters:
      - description: Instance ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: 'Deployment number page size '
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            items:
              $ref: '#/definitions/v1.PaginationDeploymentResp'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get instance's relevant deployments by instance id
      tags:
      - INSTANCE
  /v1/instances/{id}/logfile:
    get:
      consumes:
      - application/json
      description: Api to get instance's log file by instance id
      parameters:
      - description: Instance ID
        in: path
        name: id
        required: true
        type: integer
      - description: Instance's pod name
        in: query
        name: pod
        required: true
        type: string
      - description: Pod's container name
        in: query
        name: container
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get instance's log file by instance id
      tags:
      - INSTANCE
  /v1/instances/{id}/logs:
    get:
      consumes:
      - application/json
      description: Api to get instance's log by instance id
      parameters:
      - description: Instance ID
        in: path
        name: id
        required: true
        type: integer
      - description: Instance's pod name
        in: query
        name: pod
        required: true
        type: string
      - description: Pod's container name
        in: query
        name: container
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            items:
              $ref: '#/definitions/v1.InstanceLogResp'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get instance's log by instance id
      tags:
      - INSTANCE
  /v1/instances/{id}/pods:
    get:
      consumes:
      - application/json
      description: Api to get instance's pods name and containers name by instance
        id
      parameters:
      - description: Instance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            items:
              $ref: '#/definitions/v1.InstancePodResp'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get instance's pods name by instance id
      tags:
      - INSTANCE
  /v1/instances/{id}/scale:
    get:
      consumes:
      - application/json
      description: Api to get instance's scale number by instance id
      parameters:
      - description: Instance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.InstanceScaleResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get instance's scale number by instance id
      tags:
      - INSTANCE
    put:
      consumes:
      - application/json
      description: Api to update instance's scale number by instance id
      parameters:
      - description: Instance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.InstanceScaleResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update instance's scale number by instance id
      tags:
      - INSTANCE
  /v1/nodes:
    get:
      consumes:
      - application/json
      description: api for get cluster's all nodes
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.GlobalNodeResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get cluster's all nodes
      tags:
      - NODE
  /v1/projects:
    get:
      consumes:
      - application/json
      description: Api to get all projects
      parameters:
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: Project number size
        in: query
        name: page_size
        required: true
        type: integer
      - description: 'Fuzzy Query(field: name)'
        in: query
        name: query_field
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.PaginationProjectResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all projects
      tags:
      - PROJECT
    post:
      consumes:
      - application/json
      description: Api to create project
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateProjectReq'
      produces:
      - application/json
      responses:
        "201":
          description: StatusCreated
          schema:
            $ref: '#/definitions/v1.ProjectBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create project
      tags:
      - PROJECT
  /v1/projects/{id}:
    delete:
      consumes:
      - application/json
      description: Api to delete a project by id
      parameters:
      - description: Project ID
        in: body
        name: id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete a project by id
      tags:
      - PROJECT
    get:
      consumes:
      - application/json
      description: Api to get a project by id
      parameters:
      - description: Project ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ProjectBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get a project by id
      tags:
      - PROJECT
    put:
      consumes:
      - application/json
      description: api for update project description
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: JSON type for update project description
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateProjectReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ProjectBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update project description by id and body
      tags:
      - PROJECT
  /v1/projects/{id}/apps:
    get:
      consumes:
      - application/json
      description: api for get all apps by project id
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: Request page size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.PaginateAppResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all apps by species project id
      tags:
      - PROJECT
  /v1/projects/{id}/project-envs:
    get:
      consumes:
      - application/json
      description: api for get all project env
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ProjectEnvBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all project env
      tags:
      - PROJECT
    post:
      consumes:
      - application/json
      description: api for create project env by project_id env_id name
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateProjectEnvReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ProjectEnvBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create project env by project_id env_id name
      tags:
      - PROJECT
  /v1/projects/{id}/project-envs/{pe_id}:
    delete:
      consumes:
      - application/json
      description: api for delete specific project env by id
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Project Env ID
        in: path
        name: pe_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete specific project env by id
      tags:
      - PROJECT
    get:
      consumes:
      - application/json
      description: api for get project env by id
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Project Env ID
        in: path
        name: pe_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ProjectEnvBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get project env by id
      tags:
      - PROJECT
    put:
      consumes:
      - application/json
      description: api for update project env description
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Project Env ID
        in: path
        name: pe_id
        required: true
        type: integer
      - description: JSON type for update project env description
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateProjectEnvReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ProjectEnvBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update project env description by id and body
      tags:
      - PROJECT
  /v1/registries:
    get:
      consumes:
      - application/json
      description: Api to get all registries
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.RegistryBriefResp'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all registries
      tags:
      - REGISTRY
    post:
      consumes:
      - application/json
      description: Api to create registry
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateRegistryReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v1.RegistryBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create registry
      tags:
      - REGISTRY
  /v1/registries/{address}:
    delete:
      consumes:
      - application/json
      description: Api to delete an registry by address
      parameters:
      - description: Registry Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete an registry by address
      tags:
      - REGISTRY
    get:
      consumes:
      - application/json
      description: Api to get an registry
      parameters:
      - description: Registry Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.RegistryBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get an registry
      tags:
      - REGISTRY
    put:
      consumes:
      - application/json
      description: Api for update registry info
      parameters:
      - description: Registry Address
        in: path
        name: address
        required: true
        type: string
      - description: JSON body for update registry info
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateRegistryReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.RegistryBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update registry info with id and body
      tags:
      - REGISTRY
  /v1/repos:
    get:
      consumes:
      - application/json
      description: Api to get remote(gitlab) all repos
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.DroneRepoBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get remote all repos
      tags:
      - REPO
  /v1/roles:
    get:
      consumes:
      - application/json
      description: api for get all roles
      parameters:
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: Request page size
        in: query
        name: page_size
        required: true
        type: integer
      - description: 'Fuzzy Query(field: name)'
        in: query
        name: QueryField
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.PaginateRoleResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get role
      tags:
      - ROLE
    post:
      consumes:
      - application/json
      description: api for create role
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateRoleReq'
      produces:
      - application/json
      responses:
        "201":
          description: StatusCreated
          schema:
            $ref: '#/definitions/v1.RoleBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create role
      tags:
      - ROLE
  /v1/roles/{id}:
    delete:
      consumes:
      - application/json
      description: api for delete an role by id
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete an role by id
      tags:
      - ROLE
    get:
      consumes:
      - application/json
      description: api for get an role by id
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.RoleBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get an role by id
      tags:
      - ROLE
    put:
      consumes:
      - application/json
      description: api for update role description
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: JSON type for update role description
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateRoleReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.RoleBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update role description by id and body
      tags:
      - ROLE
  /v1/roles/{id}/users:
    get:
      consumes:
      - application/json
      description: api for get all users by species role id
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: Request page size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.PaginateBriefUserResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all users by species role id
      tags:
      - ROLE
  /v1/secret/{name}:
    delete:
      consumes:
      - application/json
      description: Api to delete an secret by name
      parameters:
      - description: Secret Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete an secret by name
      tags:
      - SECRET
    get:
      consumes:
      - application/json
      description: Api to get an secret
      parameters:
      - description: Secret Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.SecretBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get an secret
      tags:
      - SECRET
    put:
      consumes:
      - application/json
      description: Api to delete an secret by name
      parameters:
      - description: Secret Name
        in: path
        name: name
        required: true
        type: string
      - description: JSON type update secret info
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateSecretReq'
      produces:
      - application/json
      responses:
        "204":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.SecretBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete an secret by name
      tags:
      - SECRET
  /v1/secrets:
    get:
      consumes:
      - application/json
      description: Api to get all secrets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.SecretBriefResp'
            type: array
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all secrets
      tags:
      - SECRET
    post:
      consumes:
      - application/json
      description: Api to create secret
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateSecretReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v1.SecretBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create secret
      tags:
      - SECRET
  /v1/users:
    get:
      consumes:
      - application/json
      description: Api to get all users
      parameters:
      - default: 1
        description: Request page number
        in: query
        name: PageNum
        required: true
        type: integer
      - default: 10
        description: Request page size
        in: query
        name: PageSize
        required: true
        type: integer
      - description: 'Fuzzy Query(field: name)'
        in: query
        name: QueryField
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserPagination'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get users
      tags:
      - USER
    post:
      consumes:
      - application/json
      description: Api to create user
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UserDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create user
      tags:
      - USER
  /v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Api to delete user with id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete user with id
      tags:
      - USER
    get:
      consumes:
      - application/json
      description: Api to get user with id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UserDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get user with id
      tags:
      - USER
  /v1/users/{id}/access:
    put:
      consumes:
      - application/json
      description: Api to update user access token info by id and body
      parameters:
      - description: User ID
        in: path
        name: Id
        required: true
        type: integer
      - description: JSON body for update user access token
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateUserAccessTokenReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.UserBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update user access token info by id and body
      tags:
      - USER
  /v1/users/{id}/password:
    put:
      consumes:
      - application/json
      description: Api to update user password with id and old password
      parameters:
      - description: User ID
        in: path
        name: Id
        required: true
        type: integer
      - description: JSON body for update user info
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateUserPwdReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UserDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update user password with id and old password
      tags:
      - USER
  /v1/users/{id}/roles:
    put:
      consumes:
      - application/json
      description: Api to update user role by id and role id
      parameters:
      - description: User ID
        in: path
        name: Id
        required: true
        type: integer
      - description: JSON body for update user role
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateUserRoleReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.UserBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update user role by id and role id
      tags:
      - USER
swagger: "2.0"
