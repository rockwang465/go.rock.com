definitions:
  api.UserDetailResp:
    properties:
      created_at:
        example: "2020-12-20 15:15:22"
        type: string
      drone_token:
        example: drone_token
        type: string
      email:
        example: admin_user@sensetime.com
        type: string
      gitlab_token:
        example: gitlabe_token
        type: string
      id:
        description: type UserFullResp struct {
        example: 1
        type: integer
      login_block_until:
        example: "2020-12-20 15:15:22"
        type: string
      name:
        example: admin_user
        type: string
      password:
        example: '********'
        type: string
      role_created_at:
        example: "2020-12-20 15:15:22"
        type: string
      role_description:
        example: description for role
        type: string
      role_id:
        type: integer
      role_name:
        type: string
      role_updated_at:
        example: "2020-12-20 15:15:22"
        type: string
      role_version:
        example: 1
        type: integer
      salt:
        example: salt secret
        type: string
      token:
        example: user token
        type: string
      updated_at:
        example: "2020-12-20 15:15:22"
        type: string
    required:
    - role_description
    - role_version
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        description: can not use LocalTime
        type: string
      drone_token:
        type: string
      email:
        type: string
      gitlab_token:
        type: string
      id:
        type: integer
      login_block_until:
        type: string
      login_retry_count:
        type: integer
      name:
        type: string
      password:
        type: string
      reset_secret:
        type: string
      role_id:
        description: Role            Role       `json:"role" gorm:"ForeignKey:RoleId;AssociationForeignKey:Id"`
          // use RoleId to ForeignKey
        type: integer
      salt:
        type: string
      secret_expired_at:
        type: string
      token:
        type: string
      updated_at:
        type: string
      version:
        description: |-
          DeletedAt LocalTime `json:"deleted_at" gorm:"type:timestamp;default:null"`  // error
          DeletedAt LocalTime `json:"deleted_at" gorm:"type:timestamp null"`  // error
        type: integer
    type: object
  models.UserPagination:
    properties:
      items:
        items:
          $ref: '#/definitions/models.User'
        type: array
      page_num:
        type: integer
      page_size:
        type: integer
      pages:
        type: integer
      total:
        type: integer
    type: object
  utils.HTTPError:
    properties:
      error:
        example: error message here
        type: string
      error_code:
        example: 50000001
        type: integer
    type: object
  v1.AppBriefResp:
    properties:
      created_at:
        example: "2021-01-28 20:20:20"
        type: string
      description:
        example: description the app
        type: string
      drone_repo_id:
        example: 1
        type: integer
      full_name:
        example: senseguard/test_app
        type: string
      gitlab_address:
        example: http://gitlab.sensetime.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: test_app
        type: string
      owner:
        example: "1"
        type: string
      project_id:
        example: 1
        type: integer
      updated_at:
        example: "2021-01-28 20:20:20"
        type: string
      version:
        example: 1
        type: integer
    type: object
  v1.CreateAppReq:
    properties:
      description:
        description: 描述这个app
        example: description the app
        type: string
      gitlab_project_id:
        description: 当前用户在gitlab上拥有的project名称(即app的名称)
        example: 1
        type: integer
      name:
        description: 新建的app的名称
        example: test_app
        type: string
      project_id:
        description: 属于哪个project(id关联)
        example: 1
        type: integer
    required:
    - name
    - project_id
    type: object
  v1.CreateProjectReq:
    properties:
      description:
        example: description the project
        type: string
      name:
        example: test-project
        type: string
    required:
    - name
    type: object
  v1.CreateRoleReq:
    properties:
      description:
        example: description for role
        type: string
      name:
        example: admin_role
        type: string
    required:
    - name
    type: object
  v1.CreateUserReq:
    properties:
      email:
        example: admin_user@sensetime.com
        type: string
      name:
        example: admin_user
        type: string
      password:
        example: '********'
        type: string
      role_id:
        description: RoleId   *RoleIdReq `json:"role_id" binding:"required"`  // 用顺义的这种定义，ctx.ShouldBind报错
        example: 1
        type: integer
    required:
    - email
    - name
    - password
    - role_id
    type: object
  v1.DroneRepoBriefResp:
    properties:
      clone_url:
        example: http://gitlab.sz.sensetime.com/fis-infra/infra-console.git
        type: string
      full_name:
        example: fis-infra/infra-console
        type: string
      is_added:
        example: false
        type: boolean
      name:
        example: infra-console
        type: string
      owner:
        example: admin
        type: string
      project_id:
        example: 1
        type: integer
    type: object
  v1.LoginUserInfo:
    properties:
      name:
        example: admin_user
        type: string
      password:
        example: '********'
        type: string
    required:
    - name
    - password
    type: object
  v1.PaginateBriefUserResp:
    properties:
      items:
        items:
          $ref: '#/definitions/v1.UserBriefResp'
        type: array
      page_num:
        example: 1
        type: integer
      pages:
        example: 1
        type: integer
      per_size:
        example: 10
        type: integer
      total:
        example: 100
        type: integer
    required:
    - items
    - page_num
    - pages
    - per_size
    - total
    type: object
  v1.PaginateRoleResp:
    properties:
      items:
        items:
          $ref: '#/definitions/v1.RoleBriefResp'
        type: array
      page_num:
        example: 1
        type: integer
      pages:
        example: 1
        type: integer
      per_size:
        example: 10
        type: integer
      total:
        example: 100
        type: integer
    required:
    - items
    - page_num
    - pages
    - per_size
    - total
    type: object
  v1.ProjectBriefResp:
    properties:
      created_at:
        example: "2021-01-28 20:20:20"
        type: string
      description:
        example: description the project
        type: string
      id:
        example: 1
        type: integer
      name:
        example: test-project
        type: string
      updated_at:
        example: "2021-01-28 20:20:20"
        type: string
    type: object
  v1.ProjectPagination:
    properties:
      items:
        items:
          $ref: '#/definitions/v1.ProjectBriefResp'
        type: array
      page_num:
        example: 1
        type: integer
      pages:
        example: 1
        type: integer
      per_size:
        example: 10
        type: integer
      total:
        example: 100
        type: integer
    required:
    - items
    - page_num
    - pages
    - per_size
    - total
    type: object
  v1.ResetPwdReq:
    properties:
      email:
        example: admin_user@sensetime.com
        type: string
      password:
        example: '********'
        type: string
      re_password:
        example: '********'
        type: string
      secret:
        example: TR6UdhT7ebJOCC5N
        type: string
    required:
    - email
    - password
    - re_password
    - secret
    type: object
  v1.ResetUserReq:
    properties:
      email:
        example: admin_user@sensetime.com
        type: string
    required:
    - email
    type: object
  v1.RoleBriefResp:
    properties:
      created_at:
        example: "2018-10-09T14:57:23+08:00"
        type: string
      description:
        example: description for role
        type: string
      id:
        example: 1
        type: integer
      name:
        example: admin_role
        type: string
      updated_at:
        example: "2018-10-09T14:57:23+08:00"
        type: string
      version:
        example: 1
        type: integer
    required:
    - created_at
    - description
    - id
    - name
    - updated_at
    - version
    type: object
  v1.UpdateAppReq:
    properties:
      description:
        example: description for app
        type: string
    type: object
  v1.UpdateProjectReq:
    properties:
      description:
        example: description the project
        type: string
    type: object
  v1.UpdateRoleReq:
    properties:
      description:
        example: description for role
        type: string
    type: object
  v1.UpdateUserAccessTokenReq:
    properties:
      gitlab_token:
        description: gitlab access token
        example: real gitlab access token
        type: string
    required:
    - gitlab_token
    type: object
  v1.UpdateUserPwdReq:
    properties:
      new_password:
        example: '********'
        type: string
      old_password:
        example: '********'
        type: string
    required:
    - new_password
    - old_password
    type: object
  v1.UserBriefResp:
    properties:
      created_at:
        example: "2018-10-09T14:57:23+08:00"
        type: string
      email:
        example: admin@sensetime.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: admin_role
        type: string
      role_id:
        example: 1
        type: integer
      updated_at:
        example: "2018-10-09T14:57:23+08:00"
        type: string
      version:
        example: 1
        type: integer
    required:
    - created_at
    - email
    - id
    - name
    - role_id
    - updated_at
    - version
    type: object
info:
  contact: {}
paths:
  /v1/apps:
    get:
      consumes:
      - application/json
      description: Api to get all apps
      parameters:
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: App number size
        in: query
        name: per_size
        required: true
        type: integer
      - description: 'Fuzzy Query(field: name)'
        in: query
        name: query_field
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ProjectPagination'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all apps
      tags:
      - APP
    post:
      consumes:
      - application/json
      description: Api to create app
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateAppReq'
      produces:
      - application/json
      responses:
        "201":
          description: StatusCreated
          schema:
            $ref: '#/definitions/v1.AppBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create app
      tags:
      - APP
  /v1/apps/{id}:
    delete:
      consumes:
      - application/json
      description: api for get an app by id
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get an app by id
      tags:
      - APP
    get:
      consumes:
      - application/json
      description: api for get an app by id
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.AppBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get an app by id
      tags:
      - APP
    put:
      consumes:
      - application/json
      description: api for update app description
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: integer
      - description: JSON type for update app description
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateAppReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.AppBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update app description by id and body
      tags:
      - APP
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Api to login rock platform with name and password
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.LoginUserInfo'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.UserDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Login rock platform with name and password
      tags:
      - AUTH
  /v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Api to logout rock platform
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Logout rock platform
      tags:
      - AUTH
  /v1/auth/pwd:
    post:
      consumes:
      - application/json
      description: Api to update user password with secret
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.ResetPwdReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update user's password with secret
      tags:
      - AUTH
  /v1/auth/reset:
    post:
      consumes:
      - application/json
      description: Api to create reset email
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.ResetUserReq'
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create reset email
      tags:
      - AUTH
  /v1/project/{id}:
    delete:
      consumes:
      - application/json
      description: Api to get a project
      parameters:
      - description: Project ID
        in: body
        name: id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get a project
      tags:
      - PROJECT
    get:
      consumes:
      - application/json
      description: Api to get a project
      parameters:
      - description: Project ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ProjectBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get a project
      tags:
      - PROJECT
  /v1/projects:
    get:
      consumes:
      - application/json
      description: Api to get all projects
      parameters:
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: Project number size
        in: query
        name: per_size
        required: true
        type: integer
      - description: 'Fuzzy Query(field: name)'
        in: query
        name: query_field
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ProjectPagination'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all projects
      tags:
      - PROJECT
    post:
      consumes:
      - application/json
      description: Api to create project
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateProjectReq'
      produces:
      - application/json
      responses:
        "201":
          description: StatusCreated
          schema:
            $ref: '#/definitions/v1.ProjectBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create project
      tags:
      - PROJECT
  /v1/projects/{id}:
    put:
      consumes:
      - application/json
      description: api for update project description
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: JSON type for update project description
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateProjectReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.ProjectBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update project description by id and body
      tags:
      - ROLE
  /v1/repos:
    get:
      consumes:
      - application/json
      description: Api to get remote(gitlab) all repos
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.DroneRepoBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get remote all repos
      tags:
      - REPO
  /v1/roles:
    get:
      consumes:
      - application/json
      description: api for get all roles
      parameters:
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: Request page size
        in: query
        name: page_size
        required: true
        type: integer
      - description: 'Fuzzy Query(field: name)'
        in: query
        name: QueryField
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.PaginateRoleResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get role
      tags:
      - ROLE
    post:
      consumes:
      - application/json
      description: api for create role
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateRoleReq'
      produces:
      - application/json
      responses:
        "201":
          description: StatusCreated
          schema:
            $ref: '#/definitions/v1.RoleBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create role
      tags:
      - ROLE
  /v1/roles/{id}:
    delete:
      consumes:
      - application/json
      description: api for get an role by id
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get an role by id
      tags:
      - ROLE
    get:
      consumes:
      - application/json
      description: api for get an role by id
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.RoleBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get an role by id
      tags:
      - ROLE
    put:
      consumes:
      - application/json
      description: api for update role description
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: JSON type for update role description
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateRoleReq'
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.RoleBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update role description by id and body
      tags:
      - ROLE
  /v1/roles/{id}/users:
    get:
      consumes:
      - application/json
      description: api for get all users by species role id
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Request page number
        in: query
        name: page_num
        required: true
        type: integer
      - default: 10
        description: Request page size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: StatusOK
          schema:
            $ref: '#/definitions/v1.PaginateBriefUserResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all users by species role id
      tags:
      - ROLE
  /v1/users:
    get:
      consumes:
      - application/json
      description: Api to get all users
      parameters:
      - default: 1
        description: Request page number
        in: query
        name: PageNum
        required: true
        type: integer
      - default: 10
        description: Request page size
        in: query
        name: PageSize
        required: true
        type: integer
      - description: 'Fuzzy Query(field: name)'
        in: query
        name: QueryField
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserPagination'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get users
      tags:
      - USER
    post:
      consumes:
      - application/json
      description: Api to create user
      parameters:
      - description: JSON type input body
        in: body
        name: input_body
        required: true
        schema:
          $ref: '#/definitions/v1.CreateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UserDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create user
      tags:
      - USER
  /v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Api to delete user with id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete user with id
      tags:
      - USER
    get:
      consumes:
      - application/json
      description: Api to get user with id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UserDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get user with id
      tags:
      - USER
  /v1/users/{id}/access:
    put:
      consumes:
      - application/json
      description: Api to update user access token info by id and body
      parameters:
      - description: User ID
        in: path
        name: Id
        required: true
        type: integer
      - description: JSON body for update user access token
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateUserAccessTokenReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.UserBriefResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update user access token info by id and body
      tags:
      - USER
  /v1/users/{id}/password:
    put:
      consumes:
      - application/json
      description: Api to update user password with id and old password
      parameters:
      - description: User ID
        in: path
        name: Id
        required: true
        type: integer
      - description: JSON body for update user info
        in: body
        name: update_body
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateUserPwdReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UserDetailResp'
        "400":
          description: StatusBadRequest
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: StatusNotFound
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: StatusInternalServerError
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Update user password with id and old password
      tags:
      - USER
swagger: "2.0"
